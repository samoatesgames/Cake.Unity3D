using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor;

#if UNITY_2018_1_OR_NEWER
using UnityEditor.Build.Reporting;
#endif

namespace Cake.Unity3D
{
    public static class AutomatedBuild
    {
        /// <summary>
        /// Main build method, this should be executed by a build system.
        /// </summary>
        public static void Build()
        {
            Debug.Log("[Cake.Unity3D] Beginning automated build");

            var options = ParseCommandLineOptions();

            var buildPlayerOptions = new BuildPlayerOptions
            {
                scenes = FindEnabledEditorScenes(),
                locationPathName = ParseOption(options, "output-path", string.Empty),
                target = ParseOption(options, "platform", BuildTarget.StandaloneWindows64),
                options = BuildOptions.None
            };

            PlayerSettings.bundleVersion = ParseOption(options, "version", PlayerSettings.bundleVersion);

            if (buildPlayerOptions.target == BuildTarget.Android)
            {
                PlayerSettings.Android.bundleVersionCode = ParseOption(options, "version-code", PlayerSettings.Android.bundleVersionCode);
            }

            var report = BuildPipeline.BuildPlayer(buildPlayerOptions);

#if UNITY_2018_1_OR_NEWER
            if (report.summary.result != BuildResult.Succeeded)
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
            }
            Debug.Log(report);
#else
            if (!string.IsNullOrEmpty(report))
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
                Debug.LogError(report);
            }
#endif

            Debug.Log("[Cake.Unity3D] Automated build completed");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private static Dictionary<string, string> ParseCommandLineOptions()
        {
            var cmdLineArgs = Environment.CommandLine;
            Debug.Log($"[Cake.Unity3D] Paring the command line '{cmdLineArgs}'");

            var options = new Dictionary<string, string>();

            var optionKey = "";
            var optionValue = "";

            var parsingKey = false;
            var parsingValue = false;
            var isValueQuoted = false;

            var lastChar = default(char);
            for (var index = 0; index < cmdLineArgs.Length; ++index)
            {
                var c = cmdLineArgs[index];

                if (parsingKey)
                {
                    // Parse until we find an '=', at which point we want to parse the value
                    if (c == '=')
                    {
                        parsingValue = true;
                        parsingKey = false;
                        isValueQuoted = cmdLineArgs[index + 1] == '\"';
                        if (isValueQuoted)
                        {
                            index++;
                        }
                        lastChar = c;
                        continue;
                    }

                    optionKey += c;
                    lastChar = c;
                    continue;
                }

                if (parsingValue)
                {
                    if (isValueQuoted && c == '\"')
                    {
                        parsingValue = false;
                        TryAddOption(options, optionKey, optionValue);
                        lastChar = c;
                        continue;
                    }

                    if (!isValueQuoted && c == ' ')
                    {
                        parsingValue = false;
                        TryAddOption(options, optionKey, optionValue);
                        lastChar = c;
                        continue;
                    }

                    optionValue += c;
                    lastChar = c;
                    continue;
                }

                if (c == '-' && lastChar == '-')
                {
                    // Start of a custom argument
                    parsingKey = true;
                    optionKey = "";
                    optionValue = "";
                    lastChar = c;
                    continue;
                }

                lastChar = c;
            }

            if (parsingValue)
            {
                // Make sure we add the last thing we were parsing
                TryAddOption(options, optionKey, optionValue);
            }

            return options;
        }

        /// <summary>
        /// Attempt to add a key and value to our options dictionary.
        /// Logging out what happened
        /// </summary>
        /// <param name="options"></param>
        /// <param name="key"></param>
        /// <param name="value"></param>
        private static void TryAddOption(Dictionary<string, string> options, string key, string value)
        {
            if (options.ContainsKey(key))
            {
                Debug.LogErrorFormat("[Cake.Unity3D] The command line argument '{0}' has been specified multiple times.", key);
                return;
            }

            options[key] = value;
            Debug.LogFormat("[Cake.Unity3D] Loaded option '{0}' with value '{1}'.", key, value);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="options"></param>
        /// <param name="option"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        private static T ParseOption<T>(IDictionary<string, string> options, string option, T defaultValue)
        {
            string value;
            if (!options.TryGetValue(option, out value))
            {
                return defaultValue;
            }

            if (typeof(T).IsEnum)
            {
                return (T)Enum.Parse(typeof(T), value);
            }

            if (typeof(T) == typeof(string))
            {
                return (T)(object)value;
            }

            return (T)Convert.ChangeType(value, typeof(T));
        }

        /// <summary>
        /// Get a list of all scenes enabled in the editor build settings.
        /// </summary>
        /// <returns>All enabled scenes from the Unity editor build settings.</returns>
        private static string[] FindEnabledEditorScenes()
        {
            return EditorBuildSettings.scenes
                        .Where(x => x.enabled)
                        .Select(x => x.path)
                        .ToArray();
        }
    }
}
